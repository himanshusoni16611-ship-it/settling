             <div className="form-row">
            <label>Agent Name</label>
<Select
  ref={agentnmref}
    options={[
      // Add empty option first
      { value: "", label: "Select..." },
      ...partylist.map((p) => ({
        value: p.pnm,
        label: propercase(p.pnm),
      }))
    ]}
    
  value={agentnm ? { value: agentnm, label: propercase(agentnm) } : null}
  
  onChange={(selected) => setAgentnm(selected?.value || "")}
  
  openMenuOnFocus={true}
  isClearable={true}
  isSearchable={true}
  classNamePrefix="select"
  menuPlacement="auto"
  
  onFocus={(e) => {
    // Select text when focused (if you're using input inside Select)
    if (e.target && e.target.select) e.target.select();
  }}
  
  onBlur={() => console.log("Blurred, current value:", agentnm)}
  
  onKeyDown={(e) => {
    if (e.key === "Enter") {
      e.preventDefault();

      // Get the currently focused option from react-select's internal state
      const selectInstance = agentnmref.current;
      if (selectInstance) {
        const state = selectInstance.state;
        
        // If there's a focused option in the menu, use it
        if (state.focusedOption) {
          setAgentnm(state.focusedOption.value);
        } else {
          // Otherwise, find the best match from input
          const inputValue = state.inputValue?.toLowerCase() || "";
          const match = partylist.find(p => p.pnm.toLowerCase().startsWith(inputValue));
          if (match) setAgentnm(match.pnm);
        }
      }

      // Move focus to next input
      focusnextinput(e, agentnmref, trnfrnmref);
    }
  }}

  styles={{
    control: (base) => ({
      ...base,
      minHeight: "36px",
      width: "250px",
      textAlign: "center",
      fontSize: "14px",
    }),
    menuPortal: (base) => ({ ...base, zIndex: 9999 }),
    menu: (base) => ({ ...base, zIndex: 9999 }),
    singleValue: (base) => ({ ...base, color: "#000", fontWeight: 500 }),
  }}
></Select></div>